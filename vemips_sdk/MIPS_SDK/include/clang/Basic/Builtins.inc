/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* List of builtins that Clang recognizes                                     *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#if defined(BUILTIN) && !defined(LIBBUILTIN)
#  define LIBBUILTIN(ID, TYPE, ATTRS, HEADER, BUILTIN_LANG) BUILTIN(ID, TYPE, ATTRS)
#endif

#if defined(BUILTIN) && !defined(LANGBUILTIN)
#  define LANGBUILTIN(ID, TYPE, ATTRS, BUILTIN_LANG) BUILTIN(ID, TYPE, ATTRS)
#endif

// Some of our atomics builtins are handled by AtomicExpr rather than
// as normal builtin CallExprs. This macro is used for such builtins.
#ifndef ATOMIC_BUILTIN
#  define ATOMIC_BUILTIN(ID, TYPE, ATTRS) BUILTIN(ID, TYPE, ATTRS)
#endif

#if defined(BUILTIN) && !defined(TARGET_BUILTIN)
#  define TARGET_BUILTIN(ID, TYPE, ATTRS, FEATURE) BUILTIN(ID, TYPE, ATTRS)
#endif

#if defined(BUILTIN) && !defined(TARGET_HEADER_BUILTIN)
#  define TARGET_HEADER_BUILTIN(ID, TYPE, ATTRS, HEADER, LANG, FEATURE) BUILTIN(ID, TYPE, ATTRS)
#endif
ATOMIC_BUILTIN(__atomic_add_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_and_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_clear, "v.", "nt")
ATOMIC_BUILTIN(__atomic_compare_exchange, "v.", "t")
ATOMIC_BUILTIN(__atomic_compare_exchange_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__atomic_exchange_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_max, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_nand, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__atomic_load, "v.", "t")
ATOMIC_BUILTIN(__atomic_load_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_max_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_min_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_nand_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_or_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_store, "v.", "t")
ATOMIC_BUILTIN(__atomic_store_n, "v.", "t")
ATOMIC_BUILTIN(__atomic_sub_fetch, "v.", "t")
ATOMIC_BUILTIN(__atomic_test_and_set, "b.", "nt")
ATOMIC_BUILTIN(__atomic_xor_fetch, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_compare_exchange_strong, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_compare_exchange_weak, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_max, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_nand, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_init, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_load, "v.", "t")
ATOMIC_BUILTIN(__c11_atomic_store, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_compare_exchange_strong, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_compare_exchange_weak, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_max, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_load, "v.", "t")
ATOMIC_BUILTIN(__hip_atomic_store, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_compare_exchange_strong, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_compare_exchange_weak, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_max, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_init, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_load, "v.", "t")
ATOMIC_BUILTIN(__opencl_atomic_store, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_add_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_and_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_compare_exchange, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_compare_exchange_n, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_exchange, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_exchange_n, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_add, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_and, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_max, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_min, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_nand, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_or, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_sub, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_fetch_xor, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_load, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_load_n, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_max_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_min_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_nand_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_or_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_store, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_store_n, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_sub_fetch, "v.", "t")
ATOMIC_BUILTIN(__scoped_atomic_xor_fetch, "v.", "t")
LANGBUILTIN(__abnormal_termination, "i", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_abnormal_termination, "i", "n", ALL_MS_LANGUAGES)
BUILTIN(__builtin_abort, "v", "Fnr")
LIBBUILTIN(abort, "v", "fnr", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_abs, "ii", "FEnc")
LIBBUILTIN(abs, "ii", "fnc", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_labs, "LiLi", "FEnc")
LIBBUILTIN(labs, "LiLi", "fnc", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_llabs, "LLiLLi", "FEnc")
LIBBUILTIN(llabs, "LLiLLi", "fnc", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_acosf, "ff", "Fne")
LIBBUILTIN(acosf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_acos, "dd", "Fne")
LIBBUILTIN(acos, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_acosl, "LdLd", "Fne")
LIBBUILTIN(acosl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_acosf16, "hh", "Fne")
BUILTIN(__builtin_acosf128, "LLdLLd", "Fne")
BUILTIN(__builtin_acoshf, "ff", "Fne")
LIBBUILTIN(acoshf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_acosh, "dd", "Fne")
LIBBUILTIN(acosh, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_acoshl, "LdLd", "Fne")
LIBBUILTIN(acoshl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_acoshf128, "LLdLLd", "Fne")
BUILTIN(__builtin_add_overflow, "b.", "ntE")
BUILTIN(__builtin_addcb, "UcUcCUcCUcCUc*", "nE")
BUILTIN(__builtin_addcs, "UsUsCUsCUsCUs*", "nE")
BUILTIN(__builtin_addc, "UiUiCUiCUiCUi*", "nE")
BUILTIN(__builtin_addcl, "ULiULiCULiCULiCULi*", "nE")
BUILTIN(__builtin_addcll, "ULLiULLiCULLiCULLiCULLi*", "nE")
LIBBUILTIN(addressof, "v*v&", "fzncThE", MEMORY, CXX_LANG)
BUILTIN(__builtin_align_down, "v*vC*z", "nctE")
BUILTIN(__builtin_align_up, "v*vC*z", "nctE")
LIBBUILTIN(aligned_alloc, "v*zz", "f", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_alloca, "v*z", "Fn")
LIBBUILTIN(alloca, "v*z", "fn", STDLIB_H, ALL_GNU_LANGUAGES)
LANGBUILTIN(_alloca, "v*z", "n", ALL_MS_LANGUAGES)
BUILTIN(__builtin_alloca_uninitialized, "v*z", "Fn")
BUILTIN(__builtin_alloca_with_align, "v*zIz", "Fn")
BUILTIN(__builtin_alloca_with_align_uninitialized, "v*zIz", "Fn")
BUILTIN(__builtin_allow_runtime_check, "bcC*", "nUc")
BUILTIN(__builtin_annotation, "v.", "nt")
LANGBUILTIN(__arithmetic_fence, "v.", "tE", ALL_LANGUAGES)
LIBBUILTIN(as_const, "v&v&", "fzncThE", UTILITY, CXX_LANG)
BUILTIN(__builtin_asinf, "ff", "Fne")
LIBBUILTIN(asinf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_asin, "dd", "Fne")
LIBBUILTIN(asin, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_asinl, "LdLd", "Fne")
LIBBUILTIN(asinl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_asinf16, "hh", "Fne")
BUILTIN(__builtin_asinf128, "LLdLLd", "Fne")
BUILTIN(__builtin_asinhf, "ff", "Fne")
LIBBUILTIN(asinhf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_asinh, "dd", "Fne")
LIBBUILTIN(asinh, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_asinhl, "LdLd", "Fne")
LIBBUILTIN(asinhl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_asinhf128, "LLdLLd", "Fne")
BUILTIN(__builtin_assume, "vb", "nE")
BUILTIN(__builtin_assume_separate_storage, "vvCD*vCD*", "nE")
BUILTIN(__builtin_atanf, "ff", "Fne")
LIBBUILTIN(atanf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atan, "dd", "Fne")
LIBBUILTIN(atan, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atanl, "LdLd", "Fne")
LIBBUILTIN(atanl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atan2f, "fff", "Fne")
LIBBUILTIN(atan2f, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atan2, "ddd", "Fne")
LIBBUILTIN(atan2, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atan2l, "LdLdLd", "Fne")
LIBBUILTIN(atan2l, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atan2f16, "hhh", "Fne")
BUILTIN(__builtin_atan2f128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_atanf16, "hh", "Fne")
BUILTIN(__builtin_atanf128, "LLdLLd", "Fne")
BUILTIN(__builtin_atanhf, "ff", "Fne")
LIBBUILTIN(atanhf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atanh, "dd", "Fne")
LIBBUILTIN(atanh, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atanhl, "LdLd", "Fne")
LIBBUILTIN(atanhl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_atanhf128, "LLdLLd", "Fne")
BUILTIN(__atomic_always_lock_free, "bzvCD*", "nE")
BUILTIN(__atomic_is_lock_free, "bzvCD*", "nE")
BUILTIN(__atomic_signal_fence, "vi", "n")
BUILTIN(__atomic_thread_fence, "vi", "n")
LIBBUILTIN(bcmp, "ivC*vC*z", "fE", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_bswap16, "UsUs", "ncE")
BUILTIN(__builtin_bswap32, "UZiUZi", "ncE")
BUILTIN(__builtin_bswap64, "UWiUWi", "ncE")
BUILTIN(__builtin_bzero, "vv*z", "Fn")
LIBBUILTIN(bzero, "vv*z", "fn", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_bcopy, "vvC*v*z", "Fn")
LIBBUILTIN(bcopy, "vvC*v*z", "fn", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_bitreverse8, "UcUc", "ncE")
BUILTIN(__builtin_bitreverse16, "UsUs", "ncE")
BUILTIN(__builtin_bitreverse32, "UZiUZi", "ncE")
BUILTIN(__builtin_bitreverse64, "UWiUWi", "ncE")
LANGBUILTIN(_bittest, "UcNiC*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittest64, "UcWiC*Wi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittestandcomplement, "UcNi*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittestandcomplement64, "UcWi*Wi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittestandreset, "UcNi*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittestandreset64, "UcWi*Wi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittestandset, "UcNi*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_bittestandset64, "UcWi*Wi", "n", ALL_MS_LANGUAGES)
LIBBUILTIN(_Block_object_assign, "vv*vC*iC", "f", BLOCKS_H, ALL_LANGUAGES)
LIBBUILTIN(_Block_object_dispose, "vvC*iC", "f", BLOCKS_H, ALL_LANGUAGES)
BUILTIN(__builtin_addressof, "v*v&", "nctE")
BUILTIN(__builtin_assume_aligned, "v*vC*z.", "nctE")
BUILTIN(__builtin_bcmp, "ivC*vC*z", "FnE")
BUILTIN(__builtin___CFStringMakeConstantString, "FC*cC*", "ncE")
BUILTIN(__builtin_cpu_init, "v", "n")
BUILTIN(__builtin_cpu_is, "bcC*", "nc")
BUILTIN(__builtin_cpu_supports, "bcC*", "nc")
BUILTIN(__builtin_calloc, "v*zz", "Fn")
BUILTIN(__builtin_char_memchr, "c*cC*iz", "nE")
BUILTIN(__builtin_classify_type, "i.", "nctuE")
BUILTIN(__builtin_complex, "v.", "nctE")
BUILTIN(__builtin_constant_p, "i.", "nctuE")
BUILTIN(__builtin_dump_struct, "v.", "t")
BUILTIN(__builtin_flt_rounds, "i", "n")
BUILTIN(__builtin_free, "vv*", "Fn")
BUILTIN(__builtin_function_start, "v*v&", "nctE")
BUILTIN(__builtin_longjmp, "vv**i", "r")
BUILTIN(__builtin_malloc, "v*z", "Fn")
BUILTIN(__builtin_memcmp, "ivC*vC*z", "FnE")
BUILTIN(__builtin_memcpy_inline, "vv*vC*Iz", "n")
BUILTIN(__builtin_mempcpy, "v*v*vC*z", "Fn")
BUILTIN(__builtin_memset_inline, "vv*iIz", "n")
BUILTIN(__builtin___NSStringMakeConstantString, "FC*cC*", "ncE")
BUILTIN(__builtin_operator_delete, "vv*", "ntE")
BUILTIN(__builtin_operator_new, "v*z", "ctE")
BUILTIN(__builtin_preserve_access_index, "v.", "t")
BUILTIN(__builtin_printf, "icC*R.", "np:0:F")
BUILTIN(__builtin_realloc, "v*v*z", "Fn")
BUILTIN(__builtin_return_address, "v*IUi", "n")
BUILTIN(__builtin_set_flt_rounds, "vi", "n")
BUILTIN(__builtin_setjmp, "iv**", "j")
BUILTIN(__builtin_stdarg_start, "vA.", "nt")
BUILTIN(__builtin_strcspn, "zcC*cC*", "Fn")
BUILTIN(__builtin_va_start, "vA.", "nt")
BUILTIN(__c11_atomic_is_lock_free, "bz", "nE")
BUILTIN(__c11_atomic_signal_fence, "vi", "n")
BUILTIN(__c11_atomic_thread_fence, "vi", "n")
BUILTIN(__builtin_cabsf, "fXf", "Fne")
LIBBUILTIN(cabsf, "fXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cabs, "dXd", "Fne")
LIBBUILTIN(cabs, "dXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cabsl, "LdXLd", "Fne")
LIBBUILTIN(cabsl, "LdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cacosf, "XfXf", "Fne")
LIBBUILTIN(cacosf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cacos, "XdXd", "Fne")
LIBBUILTIN(cacos, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cacosl, "XLdXLd", "Fne")
LIBBUILTIN(cacosl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cacoshf, "XfXf", "Fne")
LIBBUILTIN(cacoshf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cacosh, "XdXd", "Fne")
LIBBUILTIN(cacosh, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cacoshl, "XLdXLd", "Fne")
LIBBUILTIN(cacoshl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_call_with_static_chain, "v.", "nt")
LIBBUILTIN(calloc, "v*zz", "f", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_canonicalizef, "ff", "nc")
BUILTIN(__builtin_canonicalize, "dd", "nc")
BUILTIN(__builtin_canonicalizel, "LdLd", "nc")
BUILTIN(__builtin_canonicalizef16, "hh", "nc")
BUILTIN(__builtin_cargf, "fXf", "Fne")
LIBBUILTIN(cargf, "fXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_carg, "dXd", "Fne")
LIBBUILTIN(carg, "dXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cargl, "LdXLd", "Fne")
LIBBUILTIN(cargl, "LdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_casinf, "XfXf", "Fne")
LIBBUILTIN(casinf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_casin, "XdXd", "Fne")
LIBBUILTIN(casin, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_casinl, "XLdXLd", "Fne")
LIBBUILTIN(casinl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_casinhf, "XfXf", "Fne")
LIBBUILTIN(casinhf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_casinh, "XdXd", "Fne")
LIBBUILTIN(casinh, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_casinhl, "XLdXLd", "Fne")
LIBBUILTIN(casinhl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_catanf, "XfXf", "Fne")
LIBBUILTIN(catanf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_catan, "XdXd", "Fne")
LIBBUILTIN(catan, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_catanl, "XLdXLd", "Fne")
LIBBUILTIN(catanl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_catanhf, "XfXf", "Fne")
LIBBUILTIN(catanhf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_catanh, "XdXd", "Fne")
LIBBUILTIN(catanh, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_catanhl, "XLdXLd", "Fne")
LIBBUILTIN(catanhl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cbrtf, "ff", "Fnc")
LIBBUILTIN(cbrtf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cbrt, "dd", "Fnc")
LIBBUILTIN(cbrt, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cbrtl, "LdLd", "Fnc")
LIBBUILTIN(cbrtl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cbrtf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_ccosf, "XfXf", "Fne")
LIBBUILTIN(ccosf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ccos, "XdXd", "Fne")
LIBBUILTIN(ccos, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ccosl, "XLdXLd", "Fne")
LIBBUILTIN(ccosl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ccoshf, "XfXf", "Fne")
LIBBUILTIN(ccoshf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ccosh, "XdXd", "Fne")
LIBBUILTIN(ccosh, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ccoshl, "XLdXLd", "Fne")
LIBBUILTIN(ccoshl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ceilf, "ff", "Fnc")
LIBBUILTIN(ceilf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ceil, "dd", "Fnc")
LIBBUILTIN(ceil, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ceill, "LdLd", "Fnc")
LIBBUILTIN(ceill, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ceilf16, "hh", "Fnc")
BUILTIN(__builtin_ceilf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_cexpf, "XfXf", "Fne")
LIBBUILTIN(cexpf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cexp, "XdXd", "Fne")
LIBBUILTIN(cexp, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cexpl, "XLdXLd", "Fne")
LIBBUILTIN(cexpl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cimagf, "fXf", "Fnc")
LIBBUILTIN(cimagf, "fXf", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cimag, "dXd", "Fnc")
LIBBUILTIN(cimag, "dXd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cimagl, "LdXLd", "Fnc")
LIBBUILTIN(cimagl, "LdXLd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin___clear_cache, "vc*c*", "n")
BUILTIN(__builtin_clogf, "XfXf", "Fne")
LIBBUILTIN(clogf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_clog, "XdXd", "Fne")
LIBBUILTIN(clog, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_clogl, "XLdXLd", "Fne")
LIBBUILTIN(clogl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_clrsb, "ii", "ncE")
BUILTIN(__builtin_clrsbl, "iLi", "ncE")
BUILTIN(__builtin_clrsbll, "iLLi", "ncE")
BUILTIN(__builtin_clzs, "iUs", "ncE")
BUILTIN(__builtin_clz, "iUi", "ncE")
BUILTIN(__builtin_clzl, "iULi", "ncE")
BUILTIN(__builtin_clzll, "iULLi", "ncE")
BUILTIN(__builtin_clzg, "i.", "ncEt")
LANGBUILTIN(commit_read_pipe, "v.", "tn", OCL_PIPE)
LANGBUILTIN(commit_write_pipe, "v.", "tn", OCL_PIPE)
BUILTIN(__builtin_conjf, "XfXf", "Fnc")
LIBBUILTIN(conjf, "XfXf", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_conj, "XdXd", "Fnc")
LIBBUILTIN(conj, "XdXd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_conjl, "XLdXLd", "Fnc")
LIBBUILTIN(conjl, "XLdXLd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_convertvector, "v.", "nctE")
BUILTIN(__builtin_copysignf, "fff", "FEnc")
LIBBUILTIN(copysignf, "fff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_copysign, "ddd", "FEnc")
LIBBUILTIN(copysign, "ddd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_copysignl, "LdLdLd", "FEnc")
LIBBUILTIN(copysignl, "LdLdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_copysignf16, "hhh", "Fnc")
BUILTIN(__builtin_copysignf128, "LLdLLdLLd", "FncE")
LANGBUILTIN(__builtin_coro_align, "z", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_alloc, "b", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_begin, "v*v*", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_destroy, "vv*", "", COR_LANG)
LANGBUILTIN(__builtin_coro_done, "bv*", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_end, "bv*Ib", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_frame, "v*", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_free, "v*v*", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_id, "v*Iiv*v*v*", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_noop, "v*", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_promise, "v*v*IiIb", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_resume, "vv*", "", COR_LANG)
LANGBUILTIN(__builtin_coro_size, "z", "n", COR_LANG)
LANGBUILTIN(__builtin_coro_suspend, "cIb", "n", COR_LANG)
BUILTIN(__builtin_cosf, "ff", "Fne")
LIBBUILTIN(cosf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cos, "dd", "Fne")
LIBBUILTIN(cos, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cosl, "LdLd", "Fne")
LIBBUILTIN(cosl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cosf16, "hh", "Fne")
BUILTIN(__builtin_cosf128, "LLdLLd", "Fne")
BUILTIN(__builtin_coshf, "ff", "Fne")
LIBBUILTIN(coshf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_cosh, "dd", "Fne")
LIBBUILTIN(cosh, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_coshl, "LdLd", "Fne")
LIBBUILTIN(coshl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_coshf16, "hh", "Fne")
BUILTIN(__builtin_coshf128, "LLdLLd", "Fne")
LIBBUILTIN(__cospif, "ff", "fne", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__cospi, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_counted_by_ref, "i.", "nt")
BUILTIN(__builtin_cpowf, "XfXfXf", "Fne")
LIBBUILTIN(cpowf, "XfXfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cpow, "XdXdXd", "Fne")
LIBBUILTIN(cpow, "XdXdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cpowl, "XLdXLdXLd", "Fne")
LIBBUILTIN(cpowl, "XLdXLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cprojf, "XfXf", "Fnc")
LIBBUILTIN(cprojf, "XfXf", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cproj, "XdXd", "Fnc")
LIBBUILTIN(cproj, "XdXd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_cprojl, "XLdXLd", "Fnc")
LIBBUILTIN(cprojl, "XLdXLd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_crealf, "fXf", "Fnc")
LIBBUILTIN(crealf, "fXf", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_creal, "dXd", "Fnc")
LIBBUILTIN(creal, "dXd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_creall, "LdXLd", "Fnc")
LIBBUILTIN(creall, "LdXLd", "fnc", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csinf, "XfXf", "Fne")
LIBBUILTIN(csinf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csin, "XdXd", "Fne")
LIBBUILTIN(csin, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csinl, "XLdXLd", "Fne")
LIBBUILTIN(csinl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csinhf, "XfXf", "Fne")
LIBBUILTIN(csinhf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csinh, "XdXd", "Fne")
LIBBUILTIN(csinh, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csinhl, "XLdXLd", "Fne")
LIBBUILTIN(csinhl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csqrtf, "XfXf", "Fne")
LIBBUILTIN(csqrtf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csqrt, "XdXd", "Fne")
LIBBUILTIN(csqrt, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_csqrtl, "XLdXLd", "Fne")
LIBBUILTIN(csqrtl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctanf, "XfXf", "Fne")
LIBBUILTIN(ctanf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctan, "XdXd", "Fne")
LIBBUILTIN(ctan, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctanl, "XLdXLd", "Fne")
LIBBUILTIN(ctanl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctanhf, "XfXf", "Fne")
LIBBUILTIN(ctanhf, "XfXf", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctanh, "XdXd", "Fne")
LIBBUILTIN(ctanh, "XdXd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctanhl, "XLdXLd", "Fne")
LIBBUILTIN(ctanhl, "XLdXLd", "fne", COMPLEX_H, ALL_LANGUAGES)
BUILTIN(__builtin_ctzs, "iUs", "ncE")
BUILTIN(__builtin_ctz, "iUi", "ncE")
BUILTIN(__builtin_ctzl, "iULi", "ncE")
BUILTIN(__builtin_ctzll, "iULLi", "ncE")
BUILTIN(__builtin_ctzg, "i.", "ncEt")
BUILTIN(__builtin_dwarf_sp_column, "Ui", "n")
BUILTIN(__builtin_dwarf_cfa, "v*", "n")
LANGBUILTIN(__debugbreak, "v", "n", ALL_MS_LANGUAGES)
BUILTIN(__builtin_debugtrap, "v", "n")
BUILTIN(__builtin_dynamic_object_size, "zvC*i", "nuE")
BUILTIN(__builtin_eh_return, "vzv*", "r")
BUILTIN(__builtin_eh_return_data_regno, "iIi", "ncE")
BUILTIN(__builtin_elementwise_acos, "v.", "nct")
BUILTIN(__builtin_elementwise_asin, "v.", "nct")
BUILTIN(__builtin_elementwise_atan, "v.", "nct")
BUILTIN(__builtin_elementwise_atan2, "v.", "nct")
BUILTIN(__builtin_elementwise_abs, "v.", "nct")
BUILTIN(__builtin_elementwise_add_sat, "v.", "nctE")
BUILTIN(__builtin_elementwise_bitreverse, "v.", "nctE")
BUILTIN(__builtin_elementwise_canonicalize, "v.", "nct")
BUILTIN(__builtin_elementwise_ceil, "v.", "nct")
BUILTIN(__builtin_elementwise_copysign, "v.", "nct")
BUILTIN(__builtin_elementwise_cos, "v.", "nct")
BUILTIN(__builtin_elementwise_cosh, "v.", "nct")
BUILTIN(__builtin_elementwise_exp, "v.", "nct")
BUILTIN(__builtin_elementwise_exp2, "v.", "nct")
BUILTIN(__builtin_elementwise_floor, "v.", "nct")
BUILTIN(__builtin_elementwise_fma, "v.", "nct")
BUILTIN(__builtin_elementwise_fmod, "v.", "nct")
BUILTIN(__builtin_elementwise_log, "v.", "nct")
BUILTIN(__builtin_elementwise_log2, "v.", "nct")
BUILTIN(__builtin_elementwise_log10, "v.", "nct")
BUILTIN(__builtin_elementwise_max, "v.", "nct")
BUILTIN(__builtin_elementwise_maximum, "v.", "nct")
BUILTIN(__builtin_elementwise_min, "v.", "nct")
BUILTIN(__builtin_elementwise_minimum, "v.", "nct")
BUILTIN(__builtin_elementwise_nearbyint, "v.", "nct")
BUILTIN(__builtin_elementwise_popcount, "v.", "nctE")
BUILTIN(__builtin_elementwise_pow, "v.", "nct")
BUILTIN(__builtin_elementwise_rint, "v.", "nct")
BUILTIN(__builtin_elementwise_round, "v.", "nct")
BUILTIN(__builtin_elementwise_roundeven, "v.", "nct")
BUILTIN(__builtin_elementwise_sin, "v.", "nct")
BUILTIN(__builtin_elementwise_sinh, "v.", "nct")
BUILTIN(__builtin_elementwise_sqrt, "v.", "nct")
BUILTIN(__builtin_elementwise_sub_sat, "v.", "nctE")
BUILTIN(__builtin_elementwise_tan, "v.", "nct")
BUILTIN(__builtin_elementwise_tanh, "v.", "nct")
BUILTIN(__builtin_elementwise_trunc, "v.", "nct")
LANGBUILTIN(enqueue_kernel, "i.", "tn", OCL_DSE)
BUILTIN(__builtin_erff, "ff", "Fne")
LIBBUILTIN(erff, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_erf, "dd", "Fne")
LIBBUILTIN(erf, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_erfl, "LdLd", "Fne")
LIBBUILTIN(erfl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_erff128, "LLdLLd", "Fne")
BUILTIN(__builtin_erfcf, "ff", "Fne")
LIBBUILTIN(erfcf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_erfc, "dd", "Fne")
LIBBUILTIN(erfc, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_erfcl, "LdLd", "Fne")
LIBBUILTIN(erfcl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_erfcf128, "LLdLLd", "Fne")
LANGBUILTIN(__exception_code, "UNi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_exception_code, "UNi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__exception_info, "v*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_exception_info, "v*", "n", ALL_MS_LANGUAGES)
LIBBUILTIN(exit, "vi", "fr", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(_Exit, "vi", "fr", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_expf, "ff", "Fne")
LIBBUILTIN(expf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_exp, "dd", "Fne")
LIBBUILTIN(exp, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_expl, "LdLd", "Fne")
LIBBUILTIN(expl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_exp2f, "ff", "Fne")
LIBBUILTIN(exp2f, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_exp2, "dd", "Fne")
LIBBUILTIN(exp2, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_exp2l, "LdLd", "Fne")
LIBBUILTIN(exp2l, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_exp2f16, "hh", "Fne")
BUILTIN(__builtin_exp2f128, "LLdLLd", "Fne")
BUILTIN(__builtin_exp10f, "ff", "Fne")
BUILTIN(__builtin_exp10, "dd", "Fne")
BUILTIN(__builtin_exp10l, "LdLd", "Fne")
BUILTIN(__builtin_exp10f16, "hh", "Fne")
BUILTIN(__builtin_exp10f128, "LLdLLd", "Fne")
BUILTIN(__builtin_expf16, "hh", "Fne")
BUILTIN(__builtin_expf128, "LLdLLd", "Fne")
BUILTIN(__builtin_expect, "LiLiLi", "ncE")
BUILTIN(__builtin_expect_with_probability, "LiLiLid", "ncE")
BUILTIN(__builtin_expm1f, "ff", "Fne")
LIBBUILTIN(expm1f, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_expm1, "dd", "Fne")
LIBBUILTIN(expm1, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_expm1l, "LdLd", "Fne")
LIBBUILTIN(expm1l, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_expm1f128, "LLdLLd", "Fne")
BUILTIN(__builtin_extend_pointer, "ULLiv*", "n")
BUILTIN(__builtin_extract_return_addr, "v*v*", "n")
BUILTIN(__builtin_ffs, "ii", "FncE")
BUILTIN(__builtin_ffsl, "iLi", "FncE")
BUILTIN(__builtin_ffsll, "iLLi", "FncE")
BUILTIN(__builtin_fpclassify, "iiiiii.", "FnctE")
BUILTIN(__builtin_fprintf, "iP*RcC*R.", "Fnp:1:")
LIBBUILTIN(fprintf, "iP*RcC*R.", "fnp:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin___fprintf_chk, "iP*RicC*R.", "Fp:2:")
BUILTIN(__builtin_fscanf, "iP*RcC*R.", "Fs:1:")
LIBBUILTIN(fscanf, "iP*RcC*R.", "fs:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_fabsf, "ff", "FEnc")
LIBBUILTIN(fabsf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fabs, "dd", "FEnc")
LIBBUILTIN(fabs, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fabsl, "LdLd", "FEnc")
LIBBUILTIN(fabsl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fabsf16, "hh", "Fnc")
BUILTIN(__builtin_fabsf128, "LLdLLd", "FncE")
LANGBUILTIN(__fastfail, "vUi", "nr", ALL_MS_LANGUAGES)
BUILTIN(__builtin_fdimf, "fff", "Fne")
LIBBUILTIN(fdimf, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fdim, "ddd", "Fne")
LIBBUILTIN(fdim, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fdiml, "LdLdLd", "Fne")
LIBBUILTIN(fdiml, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fdimf128, "LLdLLdLLd", "Fne")
#undef finitef
LIBBUILTIN(finitef, "if", "fnc", MATH_H, ALL_GNU_LANGUAGES)
#undef finite
LIBBUILTIN(finite, "id", "fnc", MATH_H, ALL_GNU_LANGUAGES)
#undef finitel
LIBBUILTIN(finitel, "iLd", "fnc", MATH_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_floorf, "ff", "Fnc")
LIBBUILTIN(floorf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_floor, "dd", "Fnc")
LIBBUILTIN(floor, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_floorl, "LdLd", "Fnc")
LIBBUILTIN(floorl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_floorf16, "hh", "Fnc")
BUILTIN(__builtin_floorf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_fmaf, "ffff", "Fne")
LIBBUILTIN(fmaf, "ffff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fma, "dddd", "Fne")
LIBBUILTIN(fma, "dddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmal, "LdLdLdLd", "Fne")
LIBBUILTIN(fmal, "LdLdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmaf16, "hhhh", "Fne")
BUILTIN(__builtin_fmaf128, "LLdLLdLLdLLd", "Fne")
BUILTIN(__builtin_fmaxf, "fff", "FEnc")
LIBBUILTIN(fmaxf, "fff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmax, "ddd", "FEnc")
LIBBUILTIN(fmax, "ddd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmaxl, "LdLdLd", "FEnc")
LIBBUILTIN(fmaxl, "LdLdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmaxf16, "hhh", "FncE")
BUILTIN(__builtin_fmaxf128, "LLdLLdLLd", "FncE")
BUILTIN(__builtin_fmaximum_numf, "fff", "FEnc")
LIBBUILTIN(fmaximum_numf, "fff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmaximum_num, "ddd", "FEnc")
LIBBUILTIN(fmaximum_num, "ddd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmaximum_numl, "LdLdLd", "FEnc")
LIBBUILTIN(fmaximum_numl, "LdLdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmaximum_numf16, "hhh", "FncE")
BUILTIN(__builtin_fmaximum_numf128, "LLdLLdLLd", "FncE")
BUILTIN(__builtin_fminf, "fff", "FEnc")
LIBBUILTIN(fminf, "fff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmin, "ddd", "FEnc")
LIBBUILTIN(fmin, "ddd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fminl, "LdLdLd", "FEnc")
LIBBUILTIN(fminl, "LdLdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fminf16, "hhh", "FncE")
BUILTIN(__builtin_fminf128, "LLdLLdLLd", "FncE")
BUILTIN(__builtin_fminimum_numf, "fff", "FEnc")
LIBBUILTIN(fminimum_numf, "fff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fminimum_num, "ddd", "FEnc")
LIBBUILTIN(fminimum_num, "ddd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fminimum_numl, "LdLdLd", "FEnc")
LIBBUILTIN(fminimum_numl, "LdLdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fminimum_numf16, "hhh", "FncE")
BUILTIN(__builtin_fminimum_numf128, "LLdLLdLLd", "FncE")
BUILTIN(__builtin_fmodf, "fff", "Fne")
LIBBUILTIN(fmodf, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmod, "ddd", "Fne")
LIBBUILTIN(fmod, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmodl, "LdLdLd", "Fne")
LIBBUILTIN(fmodl, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_fmodf16, "hhh", "Fne")
BUILTIN(__builtin_fmodf128, "LLdLLdLLd", "Fne")
LIBBUILTIN(fopen, "P*cC*cC*", "f", STDIO_H, ALL_LANGUAGES)
LIBBUILTIN(forward, "v&v&", "fzncThE", UTILITY, CXX_LANG)
LIBBUILTIN(forward_like, "v&v&", "fzncThE", UTILITY, CXX_LANG)
BUILTIN(__builtin_frame_address, "v*IUi", "n")
LIBBUILTIN(fread, "zv*zzP*", "f", STDIO_H, ALL_LANGUAGES)
LIBBUILTIN(free, "vv*", "f", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_frexpf, "ffi*", "Fn")
LIBBUILTIN(frexpf, "ffi*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_frexp, "ddi*", "Fn")
LIBBUILTIN(frexp, "ddi*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_frexpl, "LdLdi*", "Fn")
LIBBUILTIN(frexpl, "LdLdi*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_frexpf16, "hhi*", "Fn")
BUILTIN(__builtin_frexpf128, "LLdLLdi*", "Fn")
BUILTIN(__builtin_frob_return_addr, "v*v*", "n")
LIBBUILTIN(fwrite, "zvC*zzP*", "f", STDIO_H, ALL_LANGUAGES)
LIBBUILTIN(_exit, "vi", "fr", UNISTD_H, ALL_GNU_LANGUAGES)
LIBBUILTIN(_longjmp, "vJi", "frT", SETJMP_H, ALL_GNU_LANGUAGES)
LIBBUILTIN(getcontext, "iK*", "fjT", SETJMP_H, ALL_LANGUAGES)
LANGBUILTIN(__builtin_get_device_side_mangled_name, "cC*.", "ncT", CUDA_LANG)
LANGBUILTIN(__GetExceptionInfo, "v*.", "zntu", ALL_MS_LANGUAGES)
LANGBUILTIN(get_kernel_max_sub_group_size_for_ndrange, "Ui.", "tn", OCL_DSE)
LANGBUILTIN(get_kernel_preferred_work_group_size_multiple, "Ui.", "tn", OCL_DSE)
LANGBUILTIN(get_kernel_sub_group_count_for_ndrange, "Ui.", "tn", OCL_DSE)
LANGBUILTIN(get_kernel_work_group_size, "Ui.", "tn", OCL_DSE)
LANGBUILTIN(get_pipe_max_packets, "Ui.", "tn", OCL_PIPE)
LANGBUILTIN(get_pipe_num_packets, "Ui.", "tn", OCL_PIPE)
BUILTIN(__builtin___get_unsafe_stack_bottom, "v*", "nF")
BUILTIN(__builtin___get_unsafe_stack_ptr, "v*", "nF")
BUILTIN(__builtin___get_unsafe_stack_start, "v*", "nF")
BUILTIN(__builtin___get_unsafe_stack_top, "v*", "nF")
LANGBUILTIN(__builtin_hlsl_all, "b.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_any, "b.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_asdouble, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_buffer_update_counter, "UZi.", "n", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_clamp, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_clip, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_cross, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_degrees, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_dot4add_i8packed, "iUiUii", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_dot4add_u8packed, "UiUiUiUi", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_dot, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_firstbithigh, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_firstbitlow, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_frac, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_group_memory_barrier_with_group_sync, "v", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_isinf, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_lerp, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_mad, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_normalize, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_rsqrt, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_radians, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_rcp, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_resource_getpointer, "v.", "n", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_saturate, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_select, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_sign, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_elementwise_splitdouble, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_step, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_active_all_true, "bb", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_active_any_true, "bb", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_active_count_bits, "Uib", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_active_max, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_active_sum, "v.", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_get_lane_index, "Ui", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_is_first_lane, "b", "nc", HLSL_LANG)
LANGBUILTIN(__builtin_hlsl_wave_read_lane_at, "v.", "nc", HLSL_LANG)
BUILTIN(__builtin_huge_valf, "f", "ncE")
BUILTIN(__builtin_huge_val, "d", "ncE")
BUILTIN(__builtin_huge_vall, "Ld", "ncE")
BUILTIN(__builtin_huge_valf128, "LLd", "ncE")
BUILTIN(__builtin_huge_valf16, "x", "ncE")
BUILTIN(__builtin_hypotf, "fff", "Fne")
LIBBUILTIN(hypotf, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_hypot, "ddd", "Fne")
LIBBUILTIN(hypot, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_hypotl, "LdLdLd", "Fne")
LIBBUILTIN(hypotl, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_hypotf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_ilogbf128, "iLLd", "Fne")
BUILTIN(__builtin_ilogbf, "if", "Fne")
LIBBUILTIN(ilogbf, "if", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ilogb, "id", "Fne")
LIBBUILTIN(ilogb, "id", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ilogbl, "iLd", "Fne")
LIBBUILTIN(ilogbl, "iLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_index, "c*cC*i", "Fn")
LIBBUILTIN(index, "c*cC*i", "fn", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_inff, "f", "ncE")
BUILTIN(__builtin_inf, "d", "ncE")
BUILTIN(__builtin_infl, "Ld", "ncE")
BUILTIN(__builtin_inff128, "LLd", "ncE")
BUILTIN(__builtin_inff16, "x", "ncE")
BUILTIN(__builtin_init_dwarf_reg_size_table, "vv*", "n")
LANGBUILTIN(_InterlockedAnd8, "ccD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedAnd16, "ssD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedAnd, "NiNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandreset, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandreset64, "UcWiD*Wi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandreset_acq, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandreset_nf, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandreset_rel, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandset, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandset64, "UcWiD*Wi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandset_acq, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandset_nf, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_interlockedbittestandset_rel, "UcNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedCompareExchange8, "ccD*cc", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedCompareExchange16, "ssD*ss", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedCompareExchange, "NiNiD*NiNi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedCompareExchange64, "LLiLLiD*LLiLLi", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedCompareExchangePointer, "v*v*D*v*v*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedCompareExchangePointer_nf, "v*v*D*v*v*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedDecrement16, "ssD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedDecrement, "NiNiD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchange8, "ccD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchange16, "ssD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchange, "NiNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangeAdd8, "ccD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangeAdd16, "ssD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangeAdd, "NiNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangePointer, "v*v*D*v*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangeSub8, "ccD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangeSub16, "ssD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedExchangeSub, "NiNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedIncrement16, "ssD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedIncrement, "NiNiD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedOr8, "ccD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedOr16, "ssD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedOr, "NiNiD*Ni", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedXor8, "ccD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedXor16, "ssD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(_InterlockedXor, "NiNiD*Ni", "n", ALL_MS_LANGUAGES)
LIBBUILTIN(isalnum, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_is_aligned, "bvC*z", "nctE")
LIBBUILTIN(isalpha, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
LIBBUILTIN(isblank, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
LIBBUILTIN(iscntrl, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
LANGBUILTIN(__builtin_is_constant_evaluated, "b", "nE", CXX_LANG)
LIBBUILTIN(isdigit, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_isfpclass, "i.", "nctE")
BUILTIN(__builtin_isfinite, "i.", "FnctE")
LIBBUILTIN(isgraph, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_isgreater, "i.", "FnctE")
BUILTIN(__builtin_isgreaterequal, "i.", "FnctE")
BUILTIN(__builtin_isinf, "i.", "FnctE")
BUILTIN(__builtin_isinf_sign, "i.", "FnctE")
BUILTIN(__builtin_isless, "i.", "FnctE")
BUILTIN(__builtin_islessequal, "i.", "FnctE")
BUILTIN(__builtin_islessgreater, "i.", "FnctE")
LIBBUILTIN(islower, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_isnan, "i.", "FnctE")
BUILTIN(__builtin_isnormal, "i.", "FnctE")
LIBBUILTIN(isprint, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
LIBBUILTIN(ispunct, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_issignaling, "i.", "FnctE")
LIBBUILTIN(isspace, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_issubnormal, "i.", "FnctE")
BUILTIN(__builtin_isunordered, "i.", "FnctE")
LIBBUILTIN(isupper, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
LANGBUILTIN(__builtin_is_within_lifetime, "bv*", "ntEG", CXX_LANG)
LIBBUILTIN(isxdigit, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_iszero, "i.", "FnctE")
LANGBUILTIN(__iso_volatile_load8, "ccCD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_load16, "ssCD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_load32, "iiCD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_load64, "LLiLLiCD*", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_store8, "vcD*c", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_store16, "vsD*s", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_store32, "viD*i", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__iso_volatile_store64, "vLLiD*LLi", "n", ALL_MS_LANGUAGES)
BUILTIN(__builtin_llrintf128, "LLiLLd", "Fne")
BUILTIN(__builtin_llroundf128, "LLiLLd", "Fne")
BUILTIN(__builtin_launder, "v*v*", "ntE")
BUILTIN(__builtin_ldexpf, "ffi", "Fne")
LIBBUILTIN(ldexpf, "ffi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ldexp, "ddi", "Fne")
LIBBUILTIN(ldexp, "ddi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ldexpl, "LdLdi", "Fne")
LIBBUILTIN(ldexpl, "LdLdi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_ldexpf16, "hhi", "Fne")
BUILTIN(__builtin_ldexpf128, "LLdLLdi", "Fne")
BUILTIN(__builtin_lgammaf, "ff", "Fn")
LIBBUILTIN(lgammaf, "ff", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lgamma, "dd", "Fn")
LIBBUILTIN(lgamma, "dd", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lgammal, "LdLd", "Fn")
LIBBUILTIN(lgammal, "LdLd", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lgammaf128, "LLdLLd", "Fn")
BUILTIN(__builtin_llrintf, "LLif", "Fne")
LIBBUILTIN(llrintf, "LLif", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_llrint, "LLid", "Fne")
LIBBUILTIN(llrint, "LLid", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_llrintl, "LLiLd", "Fne")
LIBBUILTIN(llrintl, "LLiLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_llroundf, "LLif", "Fne")
LIBBUILTIN(llroundf, "LLif", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_llround, "LLid", "Fne")
LIBBUILTIN(llround, "LLid", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_llroundl, "LLiLd", "Fne")
LIBBUILTIN(llroundl, "LLiLd", "fne", MATH_H, ALL_LANGUAGES)
LANGBUILTIN(__builtin_load_halff, "fhC*", "nc", ALL_OCL_LANGUAGES)
LANGBUILTIN(__builtin_load_half, "dhC*", "nc", ALL_OCL_LANGUAGES)
BUILTIN(__builtin_logf, "ff", "Fne")
LIBBUILTIN(logf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log, "dd", "Fne")
LIBBUILTIN(log, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_logl, "LdLd", "Fne")
LIBBUILTIN(logl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log1pf, "ff", "Fne")
LIBBUILTIN(log1pf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log1p, "dd", "Fne")
LIBBUILTIN(log1p, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log1pl, "LdLd", "Fne")
LIBBUILTIN(log1pl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log1pf128, "LLdLLd", "Fne")
BUILTIN(__builtin_log2f, "ff", "Fne")
LIBBUILTIN(log2f, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log2, "dd", "Fne")
LIBBUILTIN(log2, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log2l, "LdLd", "Fne")
LIBBUILTIN(log2l, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log2f16, "hh", "Fne")
BUILTIN(__builtin_log2f128, "LLdLLd", "Fne")
BUILTIN(__builtin_log10f, "ff", "Fne")
LIBBUILTIN(log10f, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log10, "dd", "Fne")
LIBBUILTIN(log10, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log10l, "LdLd", "Fne")
LIBBUILTIN(log10l, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_log10f16, "hh", "Fne")
BUILTIN(__builtin_log10f128, "LLdLLd", "Fne")
BUILTIN(__builtin_logf16, "hh", "Fne")
BUILTIN(__builtin_logf128, "LLdLLd", "Fne")
BUILTIN(__builtin_logbf, "ff", "Fne")
LIBBUILTIN(logbf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_logb, "dd", "Fne")
LIBBUILTIN(logb, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_logbl, "LdLd", "Fne")
LIBBUILTIN(logbl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_logbf128, "LLdLLd", "Fne")
LIBBUILTIN(longjmp, "vJi", "frT", SETJMP_H, ALL_LANGUAGES)
BUILTIN(__builtin_lrintf, "Lif", "Fne")
LIBBUILTIN(lrintf, "Lif", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lrint, "Lid", "Fne")
LIBBUILTIN(lrint, "Lid", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lrintl, "LiLd", "Fne")
LIBBUILTIN(lrintl, "LiLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lrintf128, "LiLLd", "Fne")
LANGBUILTIN(_lrotl, "ULiULii", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_lrotr, "ULiULii", "nE", ALL_MS_LANGUAGES)
BUILTIN(__builtin_lroundf, "Lif", "Fne")
LIBBUILTIN(lroundf, "Lif", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lround, "Lid", "Fne")
LIBBUILTIN(lround, "Lid", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lroundl, "LiLd", "Fne")
LIBBUILTIN(lroundl, "LiLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_lroundf128, "LiLLd", "Fne")
LANGBUILTIN(__annotation, "wC*.", "n", ALL_MS_LANGUAGES)
LANGBUILTIN(__assume, "vb", "nE", ALL_MS_LANGUAGES)
LIBBUILTIN(_byteswap_ushort, "UsUs", "fnc", STDLIB_H, ALL_MS_LANGUAGES)
LIBBUILTIN(_byteswap_ulong, "UNiUNi", "fnc", STDLIB_H, ALL_MS_LANGUAGES)
LIBBUILTIN(_byteswap_uint64, "ULLiULLi", "fnc", STDLIB_H, ALL_MS_LANGUAGES)
LANGBUILTIN(__lzcnt16, "UsUs", "ncE", ALL_MS_LANGUAGES)
LANGBUILTIN(__lzcnt, "UiUi", "ncE", ALL_MS_LANGUAGES)
LANGBUILTIN(__lzcnt64, "UWiUWi", "ncE", ALL_MS_LANGUAGES)
LANGBUILTIN(__popcnt16, "UsUs", "ncE", ALL_MS_LANGUAGES)
LANGBUILTIN(__popcnt, "UiUi", "ncE", ALL_MS_LANGUAGES)
LANGBUILTIN(__popcnt64, "UWiUWi", "ncE", ALL_MS_LANGUAGES)
LANGBUILTIN(_ReturnAddress, "v*", "n", ALL_MS_LANGUAGES)
BUILTIN(__builtin_ms_va_copy, "vc*&c*&", "n")
BUILTIN(__builtin_ms_va_end, "vc*&", "n")
BUILTIN(__builtin_ms_va_start, "vc*&.", "nt")
LANGBUILTIN(__va_start, "vc**.", "nt", ALL_MS_LANGUAGES)
LIBBUILTIN(malloc, "v*z", "f", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_matrix_column_major_load, "v.", "nFt")
BUILTIN(__builtin_matrix_column_major_store, "v.", "nFt")
BUILTIN(__builtin_matrix_transpose, "v.", "nFt")
LIBBUILTIN(memalign, "v*zz", "f", MALLOC_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_memchr, "v*vC*iz", "FnE")
LIBBUILTIN(memchr, "v*vC*iz", "fnE", STRING_H, ALL_LANGUAGES)
LIBBUILTIN(memcmp, "ivC*vC*z", "fE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_memcpy, "v*v*vC*z", "FnE")
LIBBUILTIN(memcpy, "v*v*vC*z", "fnE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_memmove, "v*v*vC*z", "FnE")
LIBBUILTIN(memmove, "v*v*vC*z", "fnE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_memset, "v*v*iz", "Fn")
LIBBUILTIN(memset, "v*v*iz", "fn", STRING_H, ALL_LANGUAGES)
LIBBUILTIN(memccpy, "v*v*vC*iz", "f", STRING_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin___memccpy_chk, "v*v*vC*izz", "Fn")
BUILTIN(__builtin___memcpy_chk, "v*v*vC*zz", "Fn")
BUILTIN(__builtin___memmove_chk, "v*v*vC*zz", "Fn")
LIBBUILTIN(mempcpy, "v*v*vC*z", "f", STRING_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin___mempcpy_chk, "v*v*vC*zz", "Fn")
BUILTIN(__builtin___memset_chk, "v*v*izz", "Fn")
BUILTIN(__builtin_modff, "fff*", "Fn")
LIBBUILTIN(modff, "fff*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_modf, "ddd*", "Fn")
LIBBUILTIN(modf, "ddd*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_modfl, "LdLdLd*", "Fn")
LIBBUILTIN(modfl, "LdLdLd*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_modff128, "LLdLLdLLd*", "Fn")
LIBBUILTIN(move, "v&v&", "fzncThE", UTILITY, CXX_LANG)
LIBBUILTIN(move_if_noexcept, "v&v&", "fzncThE", UTILITY, CXX_LANG)
BUILTIN(__builtin_mul_overflow, "b.", "ntE")
LIBBUILTIN(NSLog, "vG.", "fp:0:", FOUNDATION_NSOBJCRUNTIME_H, OBJC_LANG)
LIBBUILTIN(NSLogv, "vGa", "fP:0:", FOUNDATION_NSOBJCRUNTIME_H, OBJC_LANG)
BUILTIN(__builtin_nanf, "fcC*", "FEUn")
LIBBUILTIN(nanf, "fcC*", "fUn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nan, "dcC*", "FEUn")
LIBBUILTIN(nan, "dcC*", "fUn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nanl, "LdcC*", "FEUn")
LIBBUILTIN(nanl, "LdcC*", "fUn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nanf16, "xcC*", "FnUE")
BUILTIN(__builtin_nanf128, "LLdcC*", "FnUE")
BUILTIN(__builtin_nansf, "fcC*", "FnUE")
BUILTIN(__builtin_nans, "dcC*", "FnUE")
BUILTIN(__builtin_nansl, "LdcC*", "FnUE")
BUILTIN(__builtin_nansf16, "xcC*", "FnUE")
BUILTIN(__builtin_nansf128, "LLdcC*", "FnUE")
BUILTIN(__builtin_nearbyintf, "ff", "Fnc")
LIBBUILTIN(nearbyintf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nearbyint, "dd", "Fnc")
LIBBUILTIN(nearbyint, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nearbyintl, "LdLd", "Fnc")
LIBBUILTIN(nearbyintl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nearbyintf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_nextafterf, "fff", "Fne")
LIBBUILTIN(nextafterf, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nextafter, "ddd", "Fne")
LIBBUILTIN(nextafter, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nextafterl, "LdLdLd", "Fne")
LIBBUILTIN(nextafterl, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nextafterf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_nexttowardf, "ffLd", "Fne")
LIBBUILTIN(nexttowardf, "ffLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nexttoward, "ddLd", "Fne")
LIBBUILTIN(nexttoward, "ddLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nexttowardl, "LdLdLd", "Fne")
LIBBUILTIN(nexttowardl, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_nexttowardf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_nondeterministic_value, "v.", "nt")
BUILTIN(__builtin_nontemporal_load, "v.", "t")
BUILTIN(__builtin_nontemporal_store, "v.", "t")
LANGBUILTIN(__noop, "i.", "nE", ALL_MS_LANGUAGES)
BUILTIN(__builtin_os_log_format, "v*v*cC*.", "p:0:nt")
BUILTIN(__builtin_os_log_format_buffer_size, "zcC*.", "p:0:nutE")
LIBBUILTIN(__exp10f, "ff", "fne", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__exp10, "dd", "fne", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__finitef, "if", "fnc", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__finite, "id", "fnc", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__finitel, "iLd", "fnc", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(objc_assign_global, "GGG*", "f", OBJC_OBJC_AUTO_H, OBJC_LANG)
LIBBUILTIN(objc_assign_ivar, "GGGY", "f", OBJC_OBJC_AUTO_H, OBJC_LANG)
LIBBUILTIN(objc_assign_strongCast, "GGG*", "f", OBJC_OBJC_AUTO_H, OBJC_LANG)
LIBBUILTIN(objc_assign_weak, "GGG*", "f", OBJC_OBJC_AUTO_H, OBJC_LANG)
LIBBUILTIN(objc_enumerationMutation, "vG", "f", OBJC_RUNTIME_H, OBJC_LANG)
LIBBUILTIN(objc_exception_extract, "Gv*", "f", OBJC_OBJC_EXCEPTION_H, OBJC_LANG)
LIBBUILTIN(objc_exception_match, "iGG", "f", OBJC_OBJC_EXCEPTION_H, OBJC_LANG)
LIBBUILTIN(objc_exception_throw, "vG", "f", OBJC_OBJC_EXCEPTION_H, OBJC_LANG)
LIBBUILTIN(objc_exception_try_enter, "vv*", "f", OBJC_OBJC_EXCEPTION_H, OBJC_LANG)
LIBBUILTIN(objc_exception_try_exit, "vv*", "f", OBJC_OBJC_EXCEPTION_H, OBJC_LANG)
LIBBUILTIN(objc_getClass, "GcC*", "f", OBJC_RUNTIME_H, OBJC_LANG)
LIBBUILTIN(objc_getMetaClass, "GcC*", "f", OBJC_RUNTIME_H, OBJC_LANG)
BUILTIN(__builtin_objc_memmove_collectable, "v*v*vC*z", "nF")
LIBBUILTIN(objc_msgSend, "GGH.", "f", OBJC_MESSAGE_H, OBJC_LANG)
LIBBUILTIN(objc_msgSend_fp2ret, "XLdGH.", "f", OBJC_MESSAGE_H, OBJC_LANG)
LIBBUILTIN(objc_msgSend_fpret, "LdGH.", "f", OBJC_MESSAGE_H, OBJC_LANG)
LIBBUILTIN(objc_msgSend_stret, "vGH.", "f", OBJC_MESSAGE_H, OBJC_LANG)
LIBBUILTIN(objc_msgSendSuper, "GM*H.", "f", OBJC_MESSAGE_H, OBJC_LANG)
LIBBUILTIN(objc_msgSendSuper_stret, "vM*H.", "f", OBJC_MESSAGE_H, OBJC_LANG)
LIBBUILTIN(objc_read_weak, "GG*", "f", OBJC_OBJC_AUTO_H, OBJC_LANG)
LIBBUILTIN(objc_sync_enter, "iG", "f", OBJC_OBJC_SYNC_H, OBJC_LANG)
LIBBUILTIN(objc_sync_exit, "iG", "f", OBJC_OBJC_SYNC_H, OBJC_LANG)
BUILTIN(__builtin_object_size, "zvC*i", "nuE")
BUILTIN(__builtin_parity, "iUi", "ncE")
BUILTIN(__builtin_parityl, "iULi", "ncE")
BUILTIN(__builtin_parityll, "iULLi", "ncE")
BUILTIN(__builtin_popcount, "iUi", "ncE")
BUILTIN(__builtin_popcountl, "iULi", "ncE")
BUILTIN(__builtin_popcountll, "iULLi", "ncE")
BUILTIN(__builtin_popcountg, "i.", "ncEt")
BUILTIN(__builtin_powf, "fff", "Fne")
LIBBUILTIN(powf, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_pow, "ddd", "Fne")
LIBBUILTIN(pow, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_powl, "LdLdLd", "Fne")
LIBBUILTIN(powl, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_powf16, "hhh", "Fne")
BUILTIN(__builtin_powf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_powif, "ffi", "Fnc")
BUILTIN(__builtin_powi, "ddi", "Fnc")
BUILTIN(__builtin_powil, "LdLdi", "Fnc")
BUILTIN(__builtin_prefetch, "vvC*.", "nc")
LIBBUILTIN(printf, "icC*.", "fp:0:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin___printf_chk, "iicC*R.", "Fp:1:")
LIBBUILTIN(pthread_create, "", "ffC<2,3>", PTHREAD_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_ptrauth_auth, "v*v*iv*", "tn")
BUILTIN(__builtin_ptrauth_auth_and_resign, "v*v*iv*iv*", "tn")
BUILTIN(__builtin_ptrauth_blend_discriminator, "zv*i", "tnc")
BUILTIN(__builtin_ptrauth_sign_constant, "v*v*iv*", "tncE")
BUILTIN(__builtin_ptrauth_sign_generic_data, "zv*v*", "tnc")
BUILTIN(__builtin_ptrauth_sign_unauthenticated, "v*v*iv*", "tnc")
BUILTIN(__builtin_ptrauth_string_discriminator, "zcC*", "ncE")
BUILTIN(__builtin_ptrauth_strip, "v*v*i", "tnc")
BUILTIN(__builtin_readcyclecounter, "ULLi", "n")
LANGBUILTIN(read_pipe, "i.", "tn", OCL_PIPE)
BUILTIN(__builtin_readsteadycounter, "ULLi", "n")
LIBBUILTIN(realloc, "v*v*z", "f", STDLIB_H, ALL_LANGUAGES)
BUILTIN(__builtin_reduce_add, "v.", "nctE")
BUILTIN(__builtin_reduce_and, "v.", "nctE")
BUILTIN(__builtin_reduce_max, "v.", "nctE")
BUILTIN(__builtin_reduce_maximum, "v.", "nct")
BUILTIN(__builtin_reduce_min, "v.", "nctE")
BUILTIN(__builtin_reduce_minimum, "v.", "nct")
BUILTIN(__builtin_reduce_mul, "v.", "nctE")
BUILTIN(__builtin_reduce_or, "v.", "nctE")
BUILTIN(__builtin_reduce_xor, "v.", "nctE")
BUILTIN(__builtin_remainderf, "fff", "Fne")
LIBBUILTIN(remainderf, "fff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_remainder, "ddd", "Fne")
LIBBUILTIN(remainder, "ddd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_remainderl, "LdLdLd", "Fne")
LIBBUILTIN(remainderl, "LdLdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_remainderf128, "LLdLLdLLd", "Fne")
BUILTIN(__builtin_remquof, "fffi*", "Fn")
LIBBUILTIN(remquof, "fffi*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_remquo, "dddi*", "Fn")
LIBBUILTIN(remquo, "dddi*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_remquol, "LdLdLdi*", "Fn")
LIBBUILTIN(remquol, "LdLdLdi*", "fn", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_remquof128, "LLdLLdLLdi*", "Fn")
LANGBUILTIN(reserve_read_pipe, "i.", "tn", OCL_PIPE)
LANGBUILTIN(reserve_write_pipe, "i.", "tn", OCL_PIPE)
BUILTIN(__builtin_rindex, "c*cC*i", "Fn")
LIBBUILTIN(rindex, "c*cC*i", "fn", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_rintf, "ff", "Fng")
LIBBUILTIN(rintf, "ff", "fng", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_rint, "dd", "Fng")
LIBBUILTIN(rint, "dd", "fng", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_rintl, "LdLd", "Fng")
LIBBUILTIN(rintl, "LdLd", "fng", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_rintf16, "hh", "Fnc")
BUILTIN(__builtin_rintf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_rotateleft8, "UcUcUc", "ncE")
BUILTIN(__builtin_rotateleft16, "UsUsUs", "ncE")
BUILTIN(__builtin_rotateleft32, "UZiUZiUZi", "ncE")
BUILTIN(__builtin_rotateleft64, "UWiUWiUWi", "ncE")
BUILTIN(__builtin_rotateright8, "UcUcUc", "ncE")
BUILTIN(__builtin_rotateright16, "UsUsUs", "ncE")
BUILTIN(__builtin_rotateright32, "UZiUZiUZi", "ncE")
BUILTIN(__builtin_rotateright64, "UWiUWiUWi", "ncE")
LANGBUILTIN(_rotl, "UiUii", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotl8, "UcUcUc", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotl16, "UsUsUc", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotl64, "UWiUWii", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotr, "UiUii", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotr8, "UcUcUc", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotr16, "UsUsUc", "nE", ALL_MS_LANGUAGES)
LANGBUILTIN(_rotr64, "UWiUWii", "nE", ALL_MS_LANGUAGES)
BUILTIN(__builtin_roundf, "ff", "Fnc")
LIBBUILTIN(roundf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_round, "dd", "Fnc")
LIBBUILTIN(round, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_roundl, "LdLd", "Fnc")
LIBBUILTIN(roundl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_roundevenf, "ff", "Fnc")
LIBBUILTIN(roundevenf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_roundeven, "dd", "Fnc")
LIBBUILTIN(roundeven, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_roundevenl, "LdLd", "Fnc")
LIBBUILTIN(roundevenl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_roundf16, "hh", "Fnc")
BUILTIN(__builtin_roundf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_roundevenf16, "hh", "Fnc")
BUILTIN(__builtin_roundevenf128, "LLdLLd", "Fnc")
BUILTIN(__builtin___snprintf_chk, "ic*RzizcC*R.", "Fp:4:")
BUILTIN(__builtin_sprintf, "ic*RcC*R.", "Fnp:1:")
LIBBUILTIN(sprintf, "ic*RcC*R.", "fnp:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin___sprintf_chk, "ic*RizcC*R.", "Fp:3:")
BUILTIN(__builtin_sscanf, "icC*RcC*R.", "Fs:1:")
LIBBUILTIN(sscanf, "icC*RcC*R.", "fs:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_sadd_overflow, "biCiCi*", "nE")
BUILTIN(__builtin_saddl_overflow, "bLiCLiCLi*", "nE")
BUILTIN(__builtin_saddll_overflow, "bLLiCLLiCLLi*", "nE")
LIBBUILTIN(savectx, "iSJ", "fjT", SETJMP_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalblnf, "ffLi", "Fne")
LIBBUILTIN(scalblnf, "ffLi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalbln, "ddLi", "Fne")
LIBBUILTIN(scalbln, "ddLi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalblnl, "LdLdLi", "Fne")
LIBBUILTIN(scalblnl, "LdLdLi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalbnf, "ffi", "Fne")
LIBBUILTIN(scalbnf, "ffi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalbn, "ddi", "Fne")
LIBBUILTIN(scalbn, "ddi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalbnl, "LdLdi", "Fne")
LIBBUILTIN(scalbnl, "LdLdi", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_scanf, "icC*R.", "Fs:0:")
LIBBUILTIN(scanf, "icC*R.", "fs:0:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_scalblnf128, "LLdLLdLi", "Fne")
BUILTIN(__builtin_scalbnf128, "LLdLLdi", "Fne")
BUILTIN(__scoped_atomic_thread_fence, "vii", "n")
#undef setjmp
LIBBUILTIN(setjmp, "iJ", "fjT", SETJMP_H, ALL_LANGUAGES)
#undef _setjmp
LIBBUILTIN(_setjmp, "iJ", "fjT", SETJMP_H, ALL_LANGUAGES)
LIBBUILTIN(_setjmpex, "iJ", "fTj", SETJMPEX_H, ALL_MS_LANGUAGES)
BUILTIN(__builtin_shufflevector, "v.", "nctE")
LIBBUILTIN(siglongjmp, "vSJi", "frT", SETJMP_H, ALL_GNU_LANGUAGES)
LIBBUILTIN(sigsetjmp, "iSJi", "fjT", SETJMP_H, ALL_LANGUAGES)
LIBBUILTIN(__sigsetjmp, "iSJi", "fjT", SETJMP_H, ALL_LANGUAGES)
BUILTIN(__builtin_signbit, "i.", "FnctE")
BUILTIN(__builtin_signbitf, "if", "FncE")
BUILTIN(__builtin_signbitl, "iLd", "FncE")
BUILTIN(__builtin_sinf, "ff", "Fne")
LIBBUILTIN(sinf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sin, "dd", "Fne")
LIBBUILTIN(sin, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sinl, "LdLd", "Fne")
LIBBUILTIN(sinl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sinf16, "hh", "Fne")
BUILTIN(__builtin_sinf128, "LLdLLd", "Fne")
BUILTIN(__builtin_sincosf, "vff*f*", "Fn")
LIBBUILTIN(sincosf, "vff*f*", "fn", MATH_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_sincos, "vdd*d*", "Fn")
LIBBUILTIN(sincos, "vdd*d*", "fn", MATH_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_sincosl, "vLdLd*Ld*", "Fn")
LIBBUILTIN(sincosl, "vLdLd*Ld*", "fn", MATH_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_sincosf16, "vhh*h*", "Fn")
BUILTIN(__builtin_sincosf128, "vLLdLLd*LLd*", "Fn")
BUILTIN(__builtin_sinhf, "ff", "Fne")
LIBBUILTIN(sinhf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sinh, "dd", "Fne")
LIBBUILTIN(sinh, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sinhl, "LdLd", "Fne")
LIBBUILTIN(sinhl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sinhf16, "hh", "Fne")
BUILTIN(__builtin_sinhf128, "LLdLLd", "Fne")
LIBBUILTIN(__sinpif, "ff", "fne", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__sinpi, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_smul_overflow, "biCiCi*", "nE")
BUILTIN(__builtin_smull_overflow, "bLiCLiCLi*", "nE")
BUILTIN(__builtin_smulll_overflow, "bLLiCLLiCLLi*", "nE")
BUILTIN(__builtin_snprintf, "ic*RzcC*R.", "Fnp:2:")
LIBBUILTIN(snprintf, "ic*RzcC*R.", "fnp:2:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_sqrtf, "ff", "Fne")
LIBBUILTIN(sqrtf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sqrt, "dd", "Fne")
LIBBUILTIN(sqrt, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sqrtl, "LdLd", "Fne")
LIBBUILTIN(sqrtl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_sqrtf16, "hh", "Fne")
BUILTIN(__builtin_sqrtf128, "LLdLLd", "Fne")
BUILTIN(__builtin_ssub_overflow, "biCiCi*", "nE")
BUILTIN(__builtin_ssubl_overflow, "bLiCLiCLi*", "nE")
BUILTIN(__builtin_ssubll_overflow, "bLLiCLLiCLLi*", "nE")
LANGBUILTIN(__builtin_store_halff, "vfh*", "n", ALL_OCL_LANGUAGES)
LANGBUILTIN(__builtin_store_half, "vdh*", "n", ALL_OCL_LANGUAGES)
BUILTIN(__builtin_stpcpy, "c*c*cC*", "Fn")
LIBBUILTIN(stpcpy, "c*c*cC*", "fn", STRING_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin___stpcpy_chk, "c*c*cC*z", "Fn")
BUILTIN(__builtin_stpncpy, "c*c*cC*z", "Fn")
LIBBUILTIN(stpncpy, "c*c*cC*z", "fn", STRING_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin___stpncpy_chk, "c*c*cC*zz", "Fn")
#undef __builtin_strcasecmp
BUILTIN(__builtin_strcasecmp, "icC*cC*", "F")
#undef strcasecmp
LIBBUILTIN(strcasecmp, "icC*cC*", "f", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_strcat, "c*c*cC*", "Fn")
LIBBUILTIN(strcat, "c*c*cC*", "fn", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strchr, "c*cC*i", "FnE")
LIBBUILTIN(strchr, "c*cC*i", "fnE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strcmp, "icC*cC*", "FnE")
LIBBUILTIN(strcmp, "icC*cC*", "fnE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strcpy, "c*c*cC*", "Fn")
LIBBUILTIN(strcpy, "c*c*cC*", "fn", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strdup, "c*cC*", "Fn")
LIBBUILTIN(strdup, "c*cC*", "fn", STRING_H, ALL_GNU_LANGUAGES)
LIBBUILTIN(strerror, "c*i", "f", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strlen, "zcC*", "FnE")
LIBBUILTIN(strlen, "zcC*", "fnE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strncat, "c*c*cC*z", "Fn")
LIBBUILTIN(strncat, "c*c*cC*z", "fn", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strncmp, "icC*cC*z", "FnE")
LIBBUILTIN(strncmp, "icC*cC*z", "fnE", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strncpy, "c*c*cC*z", "Fn")
LIBBUILTIN(strncpy, "c*c*cC*z", "fn", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strspn, "zcC*cC*", "Fn")
LIBBUILTIN(strspn, "zcC*cC*", "fn", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strstr, "c*cC*cC*", "Fn")
LIBBUILTIN(strstr, "c*cC*cC*", "fn", STRING_H, ALL_LANGUAGES)
LIBBUILTIN(strtod, "dcC*c**", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtof, "fcC*c**", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtol, "LicC*c**i", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtoll, "LLicC*c**i", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtold, "LdcC*c**", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtoul, "ULicC*c**i", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtoull, "ULLicC*c**i", "f", STDLIB_H, ALL_LANGUAGES)
LIBBUILTIN(strtok, "c*c*cC*", "f", STRING_H, ALL_LANGUAGES)
LIBBUILTIN(strcspn, "zcC*cC*", "f", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin___strcat_chk, "c*c*cC*z", "Fn")
BUILTIN(__builtin___strcpy_chk, "c*c*cC*z", "Fn")
LIBBUILTIN(strlcat, "zc*cC*z", "f", STRING_H, ALL_GNU_LANGUAGES)
LIBBUILTIN(strlcpy, "zc*cC*z", "f", STRING_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin___strlcat_chk, "zc*cC*zz", "Fn")
BUILTIN(__builtin___strlcpy_chk, "zc*cC*zz", "Fn")
#undef __builtin_strncasecmp
BUILTIN(__builtin_strncasecmp, "icC*cC*z", "F")
#undef strncasecmp
LIBBUILTIN(strncasecmp, "icC*cC*z", "f", STRINGS_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin_strndup, "c*cC*z", "Fn")
LIBBUILTIN(strndup, "c*cC*z", "fn", STRING_H, ALL_GNU_LANGUAGES)
BUILTIN(__builtin___strncat_chk, "c*c*cC*zz", "Fn")
BUILTIN(__builtin___strncpy_chk, "c*c*cC*zz", "Fn")
BUILTIN(__builtin_strpbrk, "c*cC*cC*", "Fn")
LIBBUILTIN(strpbrk, "c*cC*cC*", "fn", STRING_H, ALL_LANGUAGES)
BUILTIN(__builtin_strrchr, "c*cC*i", "Fn")
LIBBUILTIN(strrchr, "c*cC*i", "fn", STRING_H, ALL_LANGUAGES)
LIBBUILTIN(strxfrm, "zc*cC*z", "f", STRING_H, ALL_LANGUAGES)
LANGBUILTIN(sub_group_commit_read_pipe, "v.", "tn", OCL_PIPE)
LANGBUILTIN(sub_group_commit_write_pipe, "v.", "tn", OCL_PIPE)
LANGBUILTIN(sub_group_reserve_read_pipe, "i.", "tn", OCL_PIPE)
LANGBUILTIN(sub_group_reserve_write_pipe, "i.", "tn", OCL_PIPE)
BUILTIN(__builtin_sub_overflow, "b.", "ntE")
BUILTIN(__builtin_subcb, "UcUcCUcCUcCUc*", "nE")
BUILTIN(__builtin_subcs, "UsUsCUsCUsCUs*", "nE")
BUILTIN(__builtin_subc, "UiUiCUiCUiCUi*", "nE")
BUILTIN(__builtin_subcl, "ULiULiCULiCULiCULi*", "nE")
BUILTIN(__builtin_subcll, "ULLiULLiCULLiCULLiCULLi*", "nE")
BUILTIN(__sync_lock_test_and_set_1, "ccD*c.", "tn")
BUILTIN(__sync_lock_test_and_set_2, "ssD*s.", "tn")
BUILTIN(__sync_lock_test_and_set_4, "iiD*i.", "tn")
BUILTIN(__sync_lock_test_and_set_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_lock_test_and_set_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_val_compare_and_swap_1, "ccD*cc.", "tn")
BUILTIN(__sync_val_compare_and_swap_2, "ssD*ss.", "tn")
BUILTIN(__sync_val_compare_and_swap_4, "iiD*ii.", "tn")
BUILTIN(__sync_val_compare_and_swap_8, "LLiLLiD*LLiLLi.", "tn")
BUILTIN(__sync_val_compare_and_swap_16, "LLLiLLLiD*LLLiLLLi.", "tn")
BUILTIN(__sync_add_and_fetch, "v.", "t")
BUILTIN(__sync_add_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_add_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_add_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_add_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_add_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_and_and_fetch, "v.", "t")
BUILTIN(__sync_and_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_and_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_and_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_and_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_and_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_bool_compare_and_swap, "v.", "t")
BUILTIN(__sync_bool_compare_and_swap_1, "bcD*cc.", "tn")
BUILTIN(__sync_bool_compare_and_swap_2, "bsD*ss.", "tn")
BUILTIN(__sync_bool_compare_and_swap_4, "biD*ii.", "tn")
BUILTIN(__sync_bool_compare_and_swap_8, "bLLiD*LLiLLi.", "tn")
BUILTIN(__sync_bool_compare_and_swap_16, "bLLLiD*LLLiLLLi.", "tn")
BUILTIN(__sync_fetch_and_add, "v.", "t")
BUILTIN(__sync_fetch_and_add_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_add_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_add_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_add_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_add_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_fetch_and_and, "v.", "t")
BUILTIN(__sync_fetch_and_and_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_and_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_and_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_and_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_and_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_fetch_and_max, "iiD*i", "n")
BUILTIN(__sync_fetch_and_min, "iiD*i", "n")
BUILTIN(__sync_fetch_and_nand, "v.", "t")
BUILTIN(__sync_fetch_and_nand_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_nand_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_nand_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_nand_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_nand_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_fetch_and_or, "v.", "t")
BUILTIN(__sync_fetch_and_or_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_or_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_or_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_or_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_or_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_fetch_and_sub, "v.", "t")
BUILTIN(__sync_fetch_and_sub_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_sub_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_sub_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_sub_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_sub_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_fetch_and_umax, "UiUiD*Ui", "n")
BUILTIN(__sync_fetch_and_umin, "UiUiD*Ui", "n")
BUILTIN(__sync_fetch_and_xor, "v.", "t")
BUILTIN(__sync_fetch_and_xor_1, "ccD*c.", "tn")
BUILTIN(__sync_fetch_and_xor_2, "ssD*s.", "tn")
BUILTIN(__sync_fetch_and_xor_4, "iiD*i.", "tn")
BUILTIN(__sync_fetch_and_xor_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_fetch_and_xor_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_lock_release, "v.", "t")
BUILTIN(__sync_lock_release_1, "vcD*.", "tn")
BUILTIN(__sync_lock_release_2, "vsD*.", "tn")
BUILTIN(__sync_lock_release_4, "viD*.", "tn")
BUILTIN(__sync_lock_release_8, "vLLiD*.", "tn")
BUILTIN(__sync_lock_release_16, "vLLLiD*.", "tn")
BUILTIN(__sync_lock_test_and_set, "v.", "t")
BUILTIN(__sync_nand_and_fetch, "v.", "t")
BUILTIN(__sync_nand_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_nand_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_nand_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_nand_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_nand_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_or_and_fetch, "v.", "t")
BUILTIN(__sync_or_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_or_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_or_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_or_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_or_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_sub_and_fetch, "v.", "t")
BUILTIN(__sync_sub_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_sub_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_sub_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_sub_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_sub_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_swap, "v.", "t")
BUILTIN(__sync_swap_1, "ccD*c.", "tn")
BUILTIN(__sync_swap_2, "ssD*s.", "tn")
BUILTIN(__sync_swap_4, "iiD*i.", "tn")
BUILTIN(__sync_swap_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_swap_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__sync_synchronize, "v", "n")
BUILTIN(__sync_val_compare_and_swap, "v.", "t")
BUILTIN(__sync_xor_and_fetch, "v.", "t")
BUILTIN(__sync_xor_and_fetch_1, "ccD*c.", "tn")
BUILTIN(__sync_xor_and_fetch_2, "ssD*s.", "tn")
BUILTIN(__sync_xor_and_fetch_4, "iiD*i.", "tn")
BUILTIN(__sync_xor_and_fetch_8, "LLiLLiD*LLi.", "tn")
BUILTIN(__sync_xor_and_fetch_16, "LLLiLLLiD*LLLi.", "tn")
BUILTIN(__builtin_tanf, "ff", "Fne")
LIBBUILTIN(tanf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tan, "dd", "Fne")
LIBBUILTIN(tan, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tanl, "LdLd", "Fne")
LIBBUILTIN(tanl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tanf16, "hh", "Fne")
BUILTIN(__builtin_tanf128, "LLdLLd", "Fne")
BUILTIN(__builtin_tanhf, "ff", "Fne")
LIBBUILTIN(tanhf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tanh, "dd", "Fne")
LIBBUILTIN(tanh, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tanhl, "LdLd", "Fne")
LIBBUILTIN(tanhl, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tanhf16, "hh", "Fne")
BUILTIN(__builtin_tanhf128, "LLdLLd", "Fne")
LIBBUILTIN(__tanpif, "ff", "fne", MATH_H, ALL_LANGUAGES)
LIBBUILTIN(__tanpi, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tgammaf, "ff", "Fne")
LIBBUILTIN(tgammaf, "ff", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tgamma, "dd", "Fne")
LIBBUILTIN(tgamma, "dd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tgammal, "LdLd", "Fne")
LIBBUILTIN(tgammal, "LdLd", "fne", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_tgammaf128, "LLdLLd", "Fne")
BUILTIN(__builtin_thread_pointer, "v*", "nc")
LANGBUILTIN(to_global, "v*v*", "tn", OCL_GAS)
LANGBUILTIN(to_local, "v*v*", "tn", OCL_GAS)
LIBBUILTIN(tolower, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
LANGBUILTIN(to_private, "v*v*", "tn", OCL_GAS)
LIBBUILTIN(toupper, "ii", "fnU", CTYPE_H, ALL_LANGUAGES)
BUILTIN(__builtin_trap, "v", "nr")
BUILTIN(__builtin_truncf, "ff", "Fnc")
LIBBUILTIN(truncf, "ff", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_trunc, "dd", "Fnc")
LIBBUILTIN(trunc, "dd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_truncl, "LdLd", "Fnc")
LIBBUILTIN(truncl, "LdLd", "fnc", MATH_H, ALL_LANGUAGES)
BUILTIN(__builtin_truncf16, "hh", "Fnc")
BUILTIN(__builtin_truncf128, "LLdLLd", "Fnc")
BUILTIN(__builtin_uadd_overflow, "bUiCUiCUi*", "nE")
BUILTIN(__builtin_uaddl_overflow, "bULiCULiCULi*", "nE")
BUILTIN(__builtin_uaddll_overflow, "bULLiCULLiCULLi*", "nE")
BUILTIN(__builtin_umul_overflow, "bUiCUiCUi*", "nE")
BUILTIN(__builtin_umull_overflow, "bULiCULiCULi*", "nE")
BUILTIN(__builtin_umulll_overflow, "bULLiCULLiCULLi*", "nE")
BUILTIN(__builtin_unpredictable, "LiLi", "nc")
BUILTIN(__builtin_unreachable, "v", "nr")
BUILTIN(__builtin_unwind_init, "v", "")
BUILTIN(__builtin_usub_overflow, "bUiCUiCUi*", "nE")
BUILTIN(__builtin_usubl_overflow, "bULiCULiCULi*", "nE")
BUILTIN(__builtin_usubll_overflow, "bULLiCULLiCULLi*", "nE")
BUILTIN(__builtin___vfprintf_chk, "iP*RicC*Ra", "FP:2:")
BUILTIN(__builtin_vfscanf, "iP*RcC*Ra", "FS:1:")
LIBBUILTIN(vfscanf, "iP*RcC*Ra", "fS:1:", STDIO_H, ALL_LANGUAGES)
LIBBUILTIN(vfork, "p", "fjT", UNISTD_H, ALL_LANGUAGES)
BUILTIN(__builtin_vprintf, "icC*Ra", "FnP:0:")
LIBBUILTIN(vprintf, "icC*Ra", "fnP:0:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin___vprintf_chk, "iicC*Ra", "FP:1:")
BUILTIN(__builtin___vsnprintf_chk, "ic*RzizcC*Ra", "FP:4:")
BUILTIN(__builtin___vsprintf_chk, "ic*RizcC*Ra", "FP:3:")
BUILTIN(__builtin_vsscanf, "icC*RcC*Ra", "FS:1:")
LIBBUILTIN(vsscanf, "icC*RcC*Ra", "fS:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_vscanf, "icC*Ra", "FS:0:")
LIBBUILTIN(vscanf, "icC*Ra", "fS:0:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_va_copy, "vAA", "Fn")
LIBBUILTIN(va_copy, "vAA", "fn", STDARG_H, ALL_LANGUAGES)
BUILTIN(__builtin_va_end, "vA", "Fn")
LIBBUILTIN(va_end, "vA", "fn", STDARG_H, ALL_LANGUAGES)
LIBBUILTIN(va_start, "vA.", "fn", STDARG_H, ALL_LANGUAGES)
BUILTIN(__builtin_verbose_trap, "vcC*cC*", "nr")
BUILTIN(__builtin_vfprintf, "iP*RcC*Ra", "FnP:1:")
LIBBUILTIN(vfprintf, "iP*RcC*Ra", "fnP:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_vsprintf, "ic*RcC*Ra", "FnP:1:")
LIBBUILTIN(vsprintf, "ic*RcC*Ra", "fnP:1:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_vsnprintf, "ic*RzcC*Ra", "FnP:2:")
LIBBUILTIN(vsnprintf, "ic*RzcC*Ra", "fnP:2:", STDIO_H, ALL_LANGUAGES)
BUILTIN(__builtin_wmemchr, "w*wC*wz", "FnE")
LIBBUILTIN(wmemchr, "w*wC*wz", "fnE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__builtin_wmemcmp, "iwC*wC*z", "FnE")
LIBBUILTIN(wmemcmp, "iwC*wC*z", "fnE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__builtin_wmemcpy, "w*w*wC*z", "FnE")
LIBBUILTIN(wmemcpy, "w*w*wC*z", "fnE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__builtin_wmemmove, "w*w*wC*z", "FnE")
LIBBUILTIN(wmemmove, "w*w*wC*z", "fnE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__warn_memset_zero_len, "v", "nU")
BUILTIN(__builtin_wcschr, "w*wC*w", "FnUE")
LIBBUILTIN(wcschr, "w*wC*w", "fnUE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__builtin_wcscmp, "iwC*wC*", "FnUE")
LIBBUILTIN(wcscmp, "iwC*wC*", "fnUE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__builtin_wcslen, "zwC*", "FnUE")
LIBBUILTIN(wcslen, "zwC*", "fnUE", WCHAR_H, ALL_LANGUAGES)
BUILTIN(__builtin_wcsncmp, "iwC*wC*z", "FnUE")
LIBBUILTIN(wcsncmp, "iwC*wC*z", "fnUE", WCHAR_H, ALL_LANGUAGES)
LANGBUILTIN(work_group_commit_read_pipe, "v.", "tn", OCL_PIPE)
LANGBUILTIN(work_group_commit_write_pipe, "v.", "tn", OCL_PIPE)
LANGBUILTIN(work_group_reserve_read_pipe, "i.", "tn", OCL_PIPE)
LANGBUILTIN(work_group_reserve_write_pipe, "i.", "tn", OCL_PIPE)
LANGBUILTIN(write_pipe, "i.", "tn", OCL_PIPE)
BUILTIN(__xray_customevent, "vcC*z", "")
BUILTIN(__xray_typedevent, "vzcC*z", "")
LANGBUILTIN(__addressof, "v*v&", "zfncTE", CXX_LANG)

#undef ATOMIC_BUILTIN
#undef BUILTIN
#undef LIBBUILTIN
#undef LANGBUILTIN
#undef TARGET_BUILTIN
#undef TARGET_HEADER_BUILTIN
